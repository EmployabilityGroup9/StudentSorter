/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentsorter;

import connection.classesConnection;
import connection.rolesConnection;
import connection.skillsConnection;
import connection.studentConnection;
import databaseObjects.Student; // added by Andrew
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author rwals
 */
public class StudentSorter extends javax.swing.JFrame {
    studentConnection sc = new studentConnection("SSDB");
    skillsConnection skc = new skillsConnection("SSDB");
    classesConnection cc = new classesConnection("SSDB");
    rolesConnection rc = new rolesConnection("SSDB");
    
    private String sRole;
    private int row;
    private int col;
    
    ArrayList<ArrayList<String>> tmo = new ArrayList();
    ArrayList<String> tmi = new ArrayList();
    ArrayList<ArrayList<String>> flo = new ArrayList();
    ArrayList<String> fli = new ArrayList();
    
    /**
     * Creates new form StudentSorter
     */
    public StudentSorter() {
        initComponents();
        addTable();
        addToCDropBox();
        addToRDropBox();
        splitStudents();
        //sortGroups();
        //test("Programming");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tmBtnGroup = new javax.swing.ButtonGroup();
        pBtnGroup = new javax.swing.ButtonGroup();
        plBtnGroup = new javax.swing.ButtonGroup();
        cBtnGroup = new javax.swing.ButtonGroup();
        dBtnGroup = new javax.swing.ButtonGroup();
        doBtnGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        txtSName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        classComboBox = new javax.swing.JComboBox<>();
        rolesComboBox = new javax.swing.JComboBox<>();
        btnLec = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Student Details & Preferred Role");

        jLabel2.setText("Forename:");

        jLabel3.setText("Surname:");

        jLabel4.setText("Class:");

        jLabel5.setText("Preferred Role:");

        jLabel6.setText("Student Skills Ratings");

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Skills", "1", "2", "3", "4", "5"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel7.setText("Minimum/Maximum of one to be rated as 5");

        rolesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rolesComboBoxActionPerformed(evt);
            }
        });

        btnLec.setText("Lecturer");
        btnLec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLecActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFName, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(txtSName, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(classComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rolesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnLec)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSubmit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(296, 296, 296)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(classComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(rolesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnLec))
                .addContainerGap())
        );

        txtFName.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* Removed by Andrew
        Gets each of the roles from the prefRoles dropbox and runs the
        splitStudents method using the role name and the parameter
    */
    /*private void getRoles(){
        //System.out.println("Group: pRole - fName - sName - cName - sRole");
        for(int i=0;i<rolesComboBox.getItemCount();i++){
            String skill = rolesComboBox.getItemAt(i);
            splitStudents(skill);
        }
    }
    */
    
    /*
        Sorts students into groups
    */
    private void splitStudents(){ // modified by Andrew
       
        final String retrieveQuery = "SELECT * from richard.students";
        sc.setQuery(retrieveQuery);
        sc.runQuery();
        ResultSet studentList = sc.getResultSet();
        
        Student[][] groups = new Student[6][10]; // array used to store groups. CURRENTLY SET TO MAX SIZE OF 10 TEAMS OF 6 MEMBERS EACH
        ArrayList<Student> ungroupedStudents = new ArrayList(); // list used to store students waiting to be assigned a group
        
        Student currentStudent; // holds the information of the current student
        
        // put all students into array
        try {
            if(null != studentList) {
                while(studentList.next()) {

                    currentStudent = new Student(studentList.getString(1), studentList.getString(2), studentList.getString(3), studentList.getString(4), studentList.getString(5));
            
                    ungroupedStudents.add(currentStudent);            
                }
            }
        } catch (SQLException sqle){
            System.err.println("Error retrieving students from database: " + sqle.toString());
        }
           
        

        // puts ungrouped students into group based on role
        for (int i = 0; i < ungroupedStudents.size(); i++) {

            currentStudent = ungroupedStudents.get(i);
            
            // ensure position is not empty
            if (currentStudent != null) {
                
                rowloop:
                for (int j = 0; j < groups[0].length - 1; j++) { // iterate through all groups
                    
                    for (int k = 0; k < groups.length - 1; k++) { // iterate through all members in a group
                        
                        if (groups[k][j] == null) { // fill slot if position is empty
                            groups[k][j] = currentStudent; // add new student to group
                            ungroupedStudents.set(i, null); // remove student from ungrouped list
                            break rowloop;
                            
                        } else if (groups[k][j].getPreferredRole().equals(currentStudent.getPreferredRole())) { // compare member roles
                            break; // break out of group if roles are same
                        }
                    }
                }
            }
        }  
            
        /*
        BELOW IS FOR TESTING PURPOSES ONLY-----------------------------------------------
        */
        System.out.println("----------See Group 1 Below-----------");
        for (int i = 0; i < groups.length; i++) {

            if (groups[i][0] == null) {
                System.out.println("Empty space");
                break;
            }

            System.out.println(groups[i][0].getFirstName() + " " + groups[i][0].getSurName() + " : " + groups[i][0].getPreferredRole());
        }

        System.out.println("----------See Group 2 Below-----------");
        for (int i = 0; i < groups.length; i++) {

            if (groups[i][1] == null) {
                System.out.println("Empty space");
                break;
            }

            System.out.println(groups[i][1].getFirstName() + " " + groups[i][1].getSurName() + " : " + groups[i][1].getPreferredRole());
        }
    
        System.out.println("----------See Group 3 Below-----------");
        for (int i = 0; i < groups.length; i++) {

            if (groups[i][2] == null) {
                System.out.println("Empty space");
                break;
            }

            System.out.println(groups[i][2].getFirstName() + " " + groups[i][2].getSurName() + " : " + groups[i][2].getPreferredRole());
        }
    
        System.out.println("----------See Group 4 Below-----------");
        for (int i = 0; i < groups.length; i++) {

            if (groups[i][3] == null) {
                System.out.println("Empty space");
                break;
            }

            System.out.println(groups[i][3].getFirstName() + " " + groups[i][3].getSurName() + " : " + groups[i][3].getPreferredRole());
        }
        
        
        
        // the saved groups are stored in a two-dimensional array
        // for example, groups[0][0] is the 1st student in the 1st group
                          
    }
            
    private void sortGroup(){
        for(int i=0;i<tmo.size();i++){
            String value = tmi.get(0);
            fli.add(value);
        }
    }
    
    /*
        Adds student to the database
    */
    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        getRatings();
        row = jTable1.getSelectedRow();
        col = jTable1.getSelectedColumn();
        
        String fName = txtFName.getText();
        String sName = txtSName.getText();
        String class1 = classComboBox.getSelectedItem().toString();
        String pRole = rolesComboBox.getSelectedItem().toString();
        //sRole
        try{
            sc.insertRecord(fName, sName, class1, pRole, sRole);
            sc.closeConnection();
            JOptionPane.showMessageDialog(null, "Student added");
            txtFName.setText("");
            txtSName.setText("");
        }catch(Exception e){
            System.err.println("Exception added student to database: " + e.toString());
        }
        System.out.println("Strongest Role: " + sRole);
    }//GEN-LAST:event_btnSubmitActionPerformed

    /*
        Creates a skills table to the user to enter in ratings
    */
    private void addTable(){
        final String retrieveQuery = "SELECT * from richard.skills";
        skc.setQuery(retrieveQuery);
        skc.runQuery();
        ResultSet output = skc.getResultSet();
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
        table.setRowCount(0);
        
        try{
            if(null != output){
                while(output.next()){
                    String sName = output.getString(1);
                    boolean r1 = output.getBoolean(2);
                    boolean r2 = output.getBoolean(3);
                    boolean r3 = output.getBoolean(4);
                    boolean r4 = output.getBoolean(5);
                    boolean r5 = output.getBoolean(6);
                    Object[] row1 = {sName, r1, r2, r3, r4, r5};
                    table.addRow(row1);
                }
            }
        }catch(SQLException sqle){
            System.out.println("Error adding values to table: " + sqle.toString());
        }
    }
    
    /*
        Gets the ratings of each of the skills entered and will pick
        the skill that was given a 5
    */
    private void getRatings(){
        int rating = 0;
        for(int i=0;i<jTable1.getRowCount();i++){
            String rowName = jTable1.getValueAt(i, 0).toString();
            if(jTable1.getValueAt(i, 1).toString().equals("true")){
                rating = 1;
            }else if(jTable1.getValueAt(i, 2).toString().equals("true")){
                rating = 2;
            }else if(jTable1.getValueAt(i, 3).toString().equals("true")){
                rating = 3;
            }else if(jTable1.getValueAt(i, 4).toString().equals("true")){
                rating = 4;
            }else if(jTable1.getValueAt(i, 5).toString().equals("true")){
                sRole = jTable1.getValueAt(i, 0).toString();
                rating = 5;
            }
            
            System.out.println("Name: " + rowName + " Rating: " + rating);
        }
        //System.out.println("Strongest Role: " + strongRole);
    }
    
    private void addToCDropBox(){
        final String retrieveQuery = "SELECT CLASSNAME from richard.classes";
        cc.setQuery(retrieveQuery);
        cc.runQuery();
        ResultSet output = cc.getResultSet();
        try{
            if(null != output){
                while(output.next()){
                    String className = output.getString(1);
                    classComboBox.addItem(className);
                }
            }
        }catch (SQLException sqle){
            System.err.println("Error finding classes from the database: " + sqle.toString());
        }
    }
    
    private void addToRDropBox(){
        final String retrieveQuery = "SELECT ROLE from richard.roles";
        rc.setQuery(retrieveQuery);
        rc.runQuery();
        ResultSet output = rc.getResultSet();
        try{
            if(null != output){
                while(output.next()){
                    String roleName = output.getString(1);
                    rolesComboBox.addItem(roleName);
                }
            }
        }catch (SQLException sqle){
            System.err.println("Error finding classes from the database: " + sqle.toString());
        }
    }
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        row = jTable1.getSelectedRow();
        col = jTable1.getSelectedColumn();
        
        jTable1.setValueAt(false, row, 1);
        jTable1.setValueAt(false, row, 2);
        jTable1.setValueAt(false, row, 3);
        jTable1.setValueAt(false, row, 4);
        jTable1.setValueAt(false, row, 5);
        
        jTable1.setValueAt(true, row, col);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange

    }//GEN-LAST:event_jTable1PropertyChange

    private void rolesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rolesComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rolesComboBoxActionPerformed

    private void btnLecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLecActionPerformed
        LecturerLogin ll = new LecturerLogin();
        ll.setVisible(true);
    }//GEN-LAST:event_btnLecActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentSorter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentSorter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentSorter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentSorter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentSorter().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLec;
    private javax.swing.JButton btnSubmit;
    private javax.swing.ButtonGroup cBtnGroup;
    private javax.swing.JComboBox<String> classComboBox;
    private javax.swing.ButtonGroup dBtnGroup;
    private javax.swing.ButtonGroup doBtnGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.ButtonGroup pBtnGroup;
    private javax.swing.ButtonGroup plBtnGroup;
    private javax.swing.JComboBox<String> rolesComboBox;
    private javax.swing.ButtonGroup tmBtnGroup;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtSName;
    // End of variables declaration//GEN-END:variables
}
